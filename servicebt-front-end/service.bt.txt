//ser/app/context/AuthContext.ts
'use client';
import { createContext, useContext, useState, useEffect } from "react";
import { useRouter } from "next/router";

interface User {
  email: string;
  role: string;
}

interface AuthState {
  user: User | null;
  isLoading: boolean;
  error: string | null;
}

interface AuthContextProps extends AuthState {
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  refreshToken: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextProps | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [authState, setAuthState] = useState<AuthState>({
    user: null,
    isLoading: false,
    error: null,
  });
  const router = useRouter();

  useEffect(() => {
    const fetchUser = async () => {
      try {
        setAuthState((prev) => ({ ...prev, isLoading: true }));
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_API_URL}/api/auth/me/`,
          { credentials: "include" }
        );

        if (!response.ok) throw new Error("Not authenticated");

        const data = await response.json();
        setAuthState({ user: data.user, isLoading: false, error: null });
      } catch (error) {
        setAuthState({ user: null, isLoading: false, error: "Not authenticated" });
      }
    };

    fetchUser();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      setAuthState((prev) => ({ ...prev, isLoading: true, error: null }));
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/login/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
        credentials: 'include',
      });

      if (!response.ok) throw new Error("Invalid credentials");

      const data = await response.json();
      setAuthState({ user: data.user, isLoading: false, error: null });

      switch (data.user.role) {
        case "admin":
          router.push("/Admin/dashboard");
          break;
        case "user":
          router.push("/Dashboard");
          break;
        default:
          throw new Error("Unknown role");
      }
    } catch (error) {
      setAuthState({
        user: null,
        isLoading: false,
        error: "Invalid credentials",
      });
    }
  };

  const logout = async () => {
    try {
      setAuthState((prev) => ({ ...prev, isLoading: true }));
      await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/logout/`, {
        method: "POST",
        credentials: "include",
      });

      setAuthState({ user: null, isLoading: false, error: null });
      router.push("/Auth/SignIn");
    } catch (error) {
      console.error("Logout failed:", error);
      setAuthState({ ...authState, error: "Logout failed" });
    }
  };

  const refreshToken = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/refresh/`, {
        method: 'POST',
        credentials: 'include',
      });

      if (!response.ok) throw new Error("Token refresh failed");

      const data = await response.json();
      setAuthState((prev) => ({ ...prev, user: data.user }));
    } catch {
      setAuthState({ user: null, isLoading: false, error: null });
      router.push('/Auth/SignIn');
    }
  };

  return (
    <AuthContext.Provider value={{ ...authState, login, logout, refreshToken }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
//src/app/api/auth/login/route.ts
import { cookies } from "next/headers";

async function loginWithBackend(email: string, password: string) {
  const BACKEND_API_URL = process.env.NEXT_PUBLIC_API_URL || "";
  const API_KEY = process.env.NEXT_PUBLIC_API_KEY || "";

  const response = await fetch(`${BACKEND_API_URL}/api/v1/users/login/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      ...(API_KEY && { Authorization: `Bearer ${API_KEY}` }),
    },
    body: JSON.stringify({ email, password }),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || "Invalid credentials");
  }

  return response.json(); // Expected response: { accessToken, refreshToken }
}

export async function POST(request: Request) {
  try {
    const { email, password } = await request.json();

    // Validate input
    if (!email || !password) {
      return Response.json({ error: "Email and password are required" }, { status: 400 });
    }

    // Authenticate with backend
    const { accessToken, refreshToken } = await loginWithBackend(email, password);

    // Set HTTP-only cookies
    (await
          // Set HTTP-only cookies
          cookies()).set({
      name: "accessToken",
      value: accessToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 15 * 60, // 15 minutes
    });

    (await cookies()).set({
      name: "refreshToken",
      value: refreshToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      maxAge: 7 * 24 * 60 * 60, // 7 days
    });

    return Response.json({ success: true });
  } catch (error: any) {
    console.error("Login failed:", error.message);
    return Response.json({ error: error.message || "Authentication failed" }, { status: 401 });
  }
}
//src/app/api/auth/refresh/route.ts
// src/app/api/auth/refresh/route.ts
import { cookies } from 'next/headers';

export async function POST() {
  try {
    const refreshToken = cookies().get('refreshToken')?.value;
    
    if (!refreshToken) {
      return Response.json({ error: 'No refresh token' }, { status: 401 });
    }

    // Get new access token from your auth service
    const { accessToken } = await yourAuthService.refresh(refreshToken);

    // Set new access token cookie
    cookies().set({
      name: 'accessToken',
      value: accessToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 15 * 60 // 15 minutes
    });

    return Response.json({ success: true });
  } catch (error) {
    return Response.json({ error: 'Token refresh failed' }, { status: 401 });
  }
}
//src/app/hooks/useAuth.ts
import { useContext } from "react";
import { AuthContext } from "@/app/context/AuthContext";

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
//src/components/ProtectedRoute.tsx
import { useAuth } from "@/app/context/AuthContext";
import { useRouter } from "next/router";
import { useEffect } from "react";

export default function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { user, isLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/Auth/SignIn");
    }
  }, [isLoading, user]);

  if (isLoading || !user) {
    return <div>Loading...</div>;
  }

  return <>{children}</>;
}
//src/components/RoleGuard.tsx
// src/app/components/RoleGuard.tsx

import { useAuth } from '@/app/context/AuthContext';
import { UserRole } from '@/app/types/auth';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface RoleGuardProps {
  children: React.ReactNode;
  allowedRoles: UserRole[];
}

export default function RoleGuard({ children, allowedRoles }: RoleGuardProps) {
  const { user, isLoading, isAuthorized } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoading && !user) {
      router.push('/auth/signin');
    } else if (!isLoading && !isAuthorized(allowedRoles)) {
      router.push('/unauthorized');
    }
  }, [isLoading, user, allowedRoles]);

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return isAuthorized(allowedRoles) ? children : null;
}
//src/middleware.tsx
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  const protectedPaths = ['/Admin', '/Dashboard', '/ServiceProvider', '/Profile'];
  const isProtectedPath = protectedPaths.some(path => 
    request.nextUrl.pathname.startsWith(path)
  );

  if (!isProtectedPath) {
    return NextResponse.next();
  }

  const accessToken = request.cookies.get('accessToken');
  const refreshToken = request.cookies.get('refreshToken');

  if (!accessToken && !refreshToken) {
    return NextResponse.redirect(new URL('/Auth/SignIn', request.url));
  }

  if (!accessToken && refreshToken) {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `refreshToken=${refreshToken.value}`
        },
        credentials: 'include'
      });

      if (!response.ok) {
        return NextResponse.redirect(new URL('/Auth/SignIn', request.url));
      }

      const data = await response.json();
      const newAccessToken = data.accessToken;

      const responseHeaders = new Headers(response.headers);
      responseHeaders.set('Set-Cookie', `accessToken=${newAccessToken}; Path=/; HttpOnly`);

      return NextResponse.next({
        headers: responseHeaders
      });
    } catch (error) {
      return NextResponse.redirect(new URL('/Auth/SignIn', request.url));
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: ['/Admin/:path*', '/Dashboard/:path*', '/ServiceProvider/:path*', '/Profile/:path*']
};
//src/app/Auth/SignIn/page.tsx
"use client";

import React, { useState } from "react";
import { EyeIcon, EyeOffIcon } from 'lucide-react';
import { useAuth } from "../../hooks/useAuth";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const SignIn: React.FC = () => {
  const { login } = useAuth();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email || !password) {
      setError("Please fill in all fields.");
      return;
    }

    setError("");
    setIsLoading(true);

    try {
      const response = await axios.post(
        `https://service-bhutan-api.onrender.com/api/v1/users/login/`,
        { email, password },
        { withCredentials: true } // Allows sending cookies
      );

      const { token, user } = response.data;
      localStorage.setItem("authToken", token);

     toast.success("Login successful!");

      // Redirect based on role
      switch (user.role) {
        case "admin":
          window.location.href = "/Admin/Dashboard";
          break;
        case "Freelancer":
          window.location.href = "/ServiceProvider/Dashboard";
          break;
        case "Client":
        default:
          window.location.href = "/Client/Profile";
          break;
      }
    } catch (error: any) {
      toast.error(error.response?.data?.message || "An unexpected error occurred.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-r from-orange-400 via-orange-600 to-pink-400 p-3 md:p-6">
      <ToastContainer position="top-right" autoClose={3000} hideProgressBar />

      <div className="container mx-auto flex justify-center items-center max-w-5xl gap-6 py-6">
        {/* Left Side - Form */}
        <div className="w-full lg:w-1/2 backdrop-blur-md bg-white/30 rounded-2xl shadow-2xl p-5 md:p-6 border border-white/20 animate-fade-in">
          <h1 className="text-2xl md:text-3xl font-bold text-white mb-1">
            Welcome Back!
          </h1>
          <p className="text-white/80 mb-4 text-sm md:text-base">
            Enter your credentials to continue
          </p>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="email" className="text-sm font-medium text-gray-700">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full mt-2 px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-teal-500 transition-all duration-200"
              aria-label="Email address"
            />
          </div>

          <div>
            <label htmlFor="password" className="text-sm font-medium text-gray-700">
              Password
            </label>
            <div className="relative mt-2">
              <input
                type={isPasswordVisible ? "text" : "password"}
                id="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500 transition-all duration-200"
                aria-label="Password"
              />
            <button
                type="button"
                onClick={() => setIsPasswordVisible(!isPasswordVisible)}
                className="absolute inset-y-0 right-3 flex items-center text-gray-500"
                aria-label={isPasswordVisible ? "Hide password" : "Show password"}
              >
                {isPasswordVisible ? (
                  <EyeOffIcon className="w-5 h-5 text-gray-500" />
                ) : (
                  <EyeIcon className="w-5 h-5 text-gray-500" />
                )}
              </button>
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isLoading}
              className={`w-full py-2.5 rounded-lg text-white text-base font-semibold transform transition-all duration-200 ${isLoading
                  ? "bg-gray-400/50 cursor-not-allowed"
                  : "bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 hover:scale-105 active:scale-95"
                } shadow-lg mt-2`}
            >
              {isLoading ? (
                <span className="flex items-center justify-center">
                  <svg className="animate-spin h-4 w-4 mr-2" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                  </svg>
                  Logging in...
                </span>
              ) : (
                "Login"
              )}
            </button>
          </div>
        </form>

        <div className="text-center mt-6">
          <a
            href="/forgot-password"
            className="text-white text-sm hover:underline hover:text-orange-700"
          >
            Forgot Password?
          </a>
        </div>

        {/* <div className="text-center my-6 text-white">OR</div> */}

        {/* <div className="flex justify-center items-center space-x-3">
          <button className="w-full py-3 px-4 rounded-lg border border-gray-300 bg-gray-100 text-gray-800 font-semibold hover:bg-gray-200 transition duration-200">
            Continue with Google
          </button>
        </div> */}

        <div className="mt-6 text-center text-sm text-gray-50">
          Don't have an account?{" "}
          <a href="/Auth" className="text-orange-700 hover:underline">
            Sign Up
          </a>
        </div>
      </div>
    </div>
    </div>
  );
};

export default SignIn;
//layout
"use client";

import localFont from "next/font/local";
import "./globals.css";
import React, { useState, useEffect } from "react";
import Footer from "../components/Shared/Footer";

// Custom fonts
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // const [darkMode, setDarkMode] = useState(false);

  // Load dark mode preference on mount
  // useEffect(() => {
  //   const storedTheme = localStorage.getItem("theme");
  //   if (storedTheme === "dark") {
  //     setDarkMode(true);
  //     document.documentElement.classList.add("dark");
  //   } else {
  //     setDarkMode(false);
  //     document.documentElement.classList.remove("dark");
  //   }
  // }, []);

  // // Toggle dark mode
  // const toggleTheme = () => {
  //   setDarkMode(!darkMode);
  //   if (!darkMode) {
  //     document.documentElement.classList.add("dark");
  //     localStorage.setItem("theme", "dark");
  //   } else {
  //     document.documentElement.classList.remove("dark");
  //     localStorage.setItem("theme", "light");
  //   }
  // };

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300`}
      >

         {/* Main Content */}
        <main className="min-h-screen">{children}</main>

        {/* Footer */}
      </body>
    </html>
  );
}



